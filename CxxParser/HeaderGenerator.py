from typing import List
import Analyser

class HeaderGenerator:
    class_name: str
    vtable_entries: List[dict]
    
    def __init__(self, class_name, vtable_entries) -> None:
        self.class_name = class_name
        self.vtable_entries = vtable_entries
        
    def to_header(self) -> str:
        h = f"// Automatically generated by FrederoxDev/Reverse-Tools/CxxParser/HeaderGenerator.py\n\n"
        h += "%FORWARD_DECLS%\n\n"
        
        classes = set()
        structs = set()
        enums = set()
        
        h += f"class {self.class_name} {'{'}\n"
        h += "public:\n"
        
        for entry in self.vtable_entries:
            was_success = entry["success"]
            symbol = entry["symbol"]
            
            if not was_success:
                h += f"\t// Failed to match '{symbol}'\n"
                continue
            
            did_match_params = entry["found_params"]
            param_names = entry["param_names"]
            win_function = entry["win_function"]
            linux_function = entry["linux_function"]
            
            Analyser.get_all_types_used(win_function, classes, structs, enums)
            function_params = Analyser.parameter_types(win_function)
            function_name = Analyser.function_name(win_function)
            function_return = Analyser.return_type(win_function)
            
            formatted_params = function_params
            
            # Don't bother to do params for functions with no params
            if function_params == ["void"]:
                formatted_params = []
            
            elif did_match_params:
                formatted_params = []
                
                # Don't write the this parameter
                offset = 0
                if param_names[0] == "this":
                    offset = 1
                
                for (index, param) in enumerate(function_params):
                    formatted = param
                    
                    if param_names[index + offset] != "":
                        formatted += f" {param_names[index + offset]}"
                    
                    formatted_params.append(formatted) 
            
            h += f"\tvirtual {function_return} {function_name}({', '.join(formatted_params)});\n"
            
        h += "};"
        
        forward_decls = ""
        for class_name in classes:
            forward_decls += f"class {class_name};\n"
            
        for struct_name in structs:
            forward_decls += f"struct {struct_name};\n"
            
        for enum_name in enums:
            forward_decls += f"enum {enum_name};\n"

        h = h.replace("%FORWARD_DECLS%", forward_decls)
        
        return h